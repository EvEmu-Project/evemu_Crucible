
<elements>

  <!--
Direct Michelle updates:
Challenge - seems to just print its arg tuple when being processed.
OnDamageStateChange
OnSpecialFX
OnGangDamageStateChange
OnShipStateUpdate
OnSlimItemChange
OnDroneStateChange
AddBalls
RemoveBalls
RemoveBall
TerminalExplosion

Parent (_parent_) calls on destiny.Ballpark:

AddBall
MissileFollow
Stop
RemoveBall
ClearAll
SetBallMass
SetMaxSpeed
SetBallGlobal
SetBallMassive
SetBallVelocity
SetSpeedFraction
SetNotificationRange
SetBallPosition
SetBoid? - Swarm like behavior
SetBallTroll - Free ball that will become fixed after a while
SetBallRigid - A ball that will never move
SetBallFormation
AddProximitySensor
AddMushroom
RemoveProximitySensor
CloakBall
UncloakBall
Start?
Pause?
Evolve?
LaunchMissile
FormationFollow


Parent (_parent_) calls with OnBallparkCall Scatter:
Orbit
GotoDirection
AlignTo
GotoPoint
WarpTo
SetBallRadius
SetBallInteractive
SetBallFree
SetBallHarmonic
FollowBall

DSTLOCALBALLS = this is a client-side local container (array?) for entities in current 'local' bubble.
missile itemID's  dec = 9,000,000,000,000,000,000    hex = 0x7CE66C50E2840000h        from packet sniff

DSTNORMALCLOAK = 1
DSTRESTORECLOAK = 2
DSTGMCLOAK = 3

DSTBALL_GOTO = 0
DSTBALL_FOLLOW = 1
DSTBALL_STOP = 2
DSTBALL_WARP = 3
DSTBALL_ORBIT = 4
DSTBALL_MISSILE = 5
DSTBALL_MUSHROOM = 6
DSTBALL_BOID = 7
DSTBALL_TROLL = 8
DSTBALL_FIELD = 10
DSTBALL_MINIBALL = 9
DSTBALL_RIGID = 11
DSTBALL_FORMATION = 12
DSTBALL_ALIGN = 12

DST_CREATE = 1
DST_DESTROY = 2
DST_PROXIMITY = 3
DST_PRETICK = 4
DST_POSTTICK = 5
DST_COLLISION = 6
DST_RANGE = 7
DST_MODECHANGE = 8
DST_PARTITION = 9
DST_WARPACTIVATION = 10
DST_WARPEXIT = 11
  -->

  <include file="packets/General.h" />

  <elementDef name="DoDestinyUpdateMain">
    <tupleInline>
      <!-- 0: list of DoDestinyAction -->
        <list name="updates" />
        <!-- 1 -->
        <bool name="waitForBubble" />
        <!-- 2: this is a list of dogma events, like used in OnMultiEvent -->
        <list name="events" optional="true" />
    </tupleInline>
  </elementDef>

  <!-- same call as above, completely omitting the events arg. -->
  <elementDef name="DoDestinyUpdateMain_2">
    <tupleInline>
        <!-- 0: list of DoDestinyAction -->
        <list name="updates" />
        <!-- 1 -->
        <bool name="waitForBubble" />
    </tupleInline>
  </elementDef>

  <elementDef name="PackagedAction">
    <tupleInline>
      <!-- 0 -->
      <stringInline value="PackagedAction" />
      <!-- 1 -->
      <raw name="substream" />
        <!-- at this point, it's tuple for RemoveBall or list for AddBall
                will have to write this part in code, based on updates  -->
    </tupleInline>
  </elementDef>

  <elementDef name="DoDestinyAction">
    <tupleInline>
      <!-- stamp -->
      <int name="stamp" />
      <!-- event -->
      <raw name="update" />
    </tupleInline>
  </elementDef>

  <elementDef name="SetState">
    <tupleInline>
      <!-- 0 -->
      <stringInline value="SetState" />
      <!-- 1 -->
      <tupleInline>
        <!-- 0 -->
        <objectInline>
          <stringInline value="util.KeyVal" />
          <dictInline>
            <dictInlineEntry key="stamp">
              <int name="stamp" />
            </dictInlineEntry>
            <dictInlineEntry key="state">
              <!-- this is the big nasty state buffer -->
              <buffer name="destiny_state" />
            </dictInlineEntry>
            <dictInlineEntry key="ego">
              <int name="ego" />
            </dictInlineEntry>
            <dictInlineEntry key="damageState">
              <!-- dict of k,v as k= entity ID and v= SetState_DamageState struct -->
              <dictInt name="damageState" />
            </dictInlineEntry>
            <dictInlineEntry key="aggressors">
              <!-- maps from an entity ID (I think) to a tuple: (entityID, timestamp) -->
              <dictInt name="aggressors" />
            </dictInlineEntry>
            <dictInlineEntry key="droneState">
              <!-- rowset: droneID, ownerID, controllerID, activityState, typeID, controllerOwnerID, targetID  -->
              <!--<element type="util_Rowset" name="droneState" />-->
              <raw name="droneState" />
            </dictInlineEntry>
            <dictInlineEntry key="slims">
              <list name="slims" />
            </dictInlineEntry>
            <dictInlineEntry key="solItem">
              <!-- DBRow itemID,typeID,ownerID,locationID,flag,contraband,singleton,quantity,groupID,categoryID,customInfo   -->
              <raw name="solItem" />
            </dictInlineEntry>
            <dictInlineEntry key="effectStates">
              <list name="effectStates" />
            </dictInlineEntry>
            <dictInlineEntry key="allianceBridges">
              <list name="allianceBridges" />
            </dictInlineEntry>
          </dictInline>
        </objectInline>
      </tupleInline>
    </tupleInline>
  </elementDef>

  <elementDef name="SlimItem">
    <objectInline>
        <stringInline value="foo.SlimItem" />
        <dictInline>
          <dictInlineEntry key="itemID">
            <int name="itemID" />
          </dictInlineEntry>
            <dictInlineEntry key="typeID">
              <int name="typeID" />
            </dictInlineEntry>
            <dictInlineEntry key="allianceID">
              <int name="allianceID" default="0" />
            </dictInlineEntry>
            <dictInlineEntry key="corpID">
              <int name="corpID" />
            </dictInlineEntry>
            <dictInlineEntry key="modules">
              <listInt name="modules" />
            </dictInlineEntry>
            <dictInlineEntry key="warFactionID">
              <real name="warFactionID" />
            </dictInlineEntry>
            <dictInlineEntry key="securityStatus">
              <real name="securityStatus" />
            </dictInlineEntry>
            <dictInlineEntry key="bounty">
              <real name="bounty" />
            </dictInlineEntry>
            <dictInlineEntry key="ownerID">
              <int name="ownerID" />
            </dictInlineEntry>
            <dictInlineEntry key="groupID">
              <int name="groupID" />
            </dictInlineEntry>
            <dictInlineEntry key="categoryID">
              <int name="categoryID" />
            </dictInlineEntry>
            <dictInlineEntry key="charID">
              <int name="charID" />
            </dictInlineEntry>
        </dictInline>
    </objectInline>
  </elementDef>
<!--
    def AddBalls(self, chunk):
        state, slims, damageDict = chunk
        -->
  <elementDef name="AddBalls">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="AddBalls" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0 -->
            <tupleInline>
              <!-- 0 -->
              <buffer name="state" />
              <!-- 1: slims (list of SlimItem) -->
              <list name="slims" />
              <!-- 2 -->
              <dictInt name="damageDict" />
            </tupleInline>
        </tupleInline>
      </tupleInline>
  </elementDef>

<!--
    def AddBalls2(self, chunk):
        state, extraBallData = chunk
        for data in extraBallData:
            if type(data) is tuple:
                slimItemDict, damageState = data
            else:
                slimItemDict = data
                damageState = None
        -->

  <elementDef name="AddBalls2">
    <tupleInline>
      <!-- 0-->
      <int name="stateStamp" />
      <tupleInline>
        <!-- 0 -->
        <stringInline value="AddBalls2" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0 -->
            <tupleInline>
              <!-- 0 state buffer for AddBalls-->
              <buffer name="state" />
              <!-- 1: balls (list of ball dicts to add) -->
              <list name="extraBallData" />
            </tupleInline>
        </tupleInline>
      </tupleInline>
    </tupleInline>
  </elementDef>

  <elementDef name="OnDamageStateChange">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="OnDamageStateChange" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0: shipID -->
            <int name="entityID" />
        <!-- entry of type DoDestinyDamageState -->
            <raw name="state" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="DoDestinyDamageState">
    <tupleInline>
      <tupleInline>
        <!-- this is a ratio from 0-1 -->
        <real name="shield" />
        <!-- shield recharge rate in ms -->
        <real name="recharge" />
        <long name="timestamp" />
      </tupleInline>
      <!-- this is a ratio from 0-1 -->
      <real name="armor" />
      <!-- this is a ratio from 0-1 -->
      <real name="structure" />
    </tupleInline>
  </elementDef>

  <elementDef name="DoDestinyDamageState3">
    <tupleInline>
        <real name="shield" default="0" />
        <real name="armor" default="0" />
        <real name="structure" default="1" />
    </tupleInline>
  </elementDef>

  <elementDef name="DamageDetails">
    <listInline>
      <tupleInline>
          <real name="shield" />
          <real name="recharge" />
          <long name="timestamp" />
        </tupleInline>
        <real name="armor" />
        <real name="structure" />
    </listInline>
  </elementDef>

  <elementDef name="RemoveBallFromBP">
    <tupleInline>
      <!-- 0: call -->
      <stringInline value="RemoveBall" />
      <!-- 1: arguments -->
      <tupleInline>
        <int name="entityID" />
      </tupleInline>
    </tupleInline>
  </elementDef>

  <elementDef name="RemoveBallsFromBP">
    <tupleInline>
      <!-- 0: call -->
      <stringInline value="RemoveBalls" />
      <!-- 1: arguments -->
      <tupleInline>
        <listInt name="balls" />
      </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="OnSpecialFX10">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="OnSpecialFX" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0: shipID -->
            <int name="entityID" />
            <!-- 1: moduleID -->
            <int name="moduleID" default="0" none_marker="0" />
            <!-- 2: moduleTypeID -->
            <int name="moduleTypeID" default="0" none_marker="0" />
            <!-- 3: targetID -->
            <int name="targetID" default="0" none_marker="0" />
            <!-- 4: chargeTypeID -->
            <int name="chargeTypeID" default="0" none_marker="0" />
            <!-- 5: area, completely unknown contents, empty PyList in packets -->
            <list name="area" />
            <!-- 6: see scripts/parklife/fxSequencer.py -->
            <string name="guid"/>
            <!-- 7: isOffensive: soft boolean -->
            <int name="isOffensive" />
            <!-- 8: start: soft boolean -->
            <int name="start" />
            <!-- 9: active: soft boolean -->
            <int name="active" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="OnSpecialFX14">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="OnSpecialFX" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0: shipID -->
            <int name="entityID" />
            <!-- 1: moduleID (shipID for NPC) -->
            <int name="moduleID" default="0" none_marker="0" />
            <!-- 2: moduleTypeID -->
            <int name="moduleTypeID" default="0" none_marker="0" />
            <!-- 3: targetID or None -->
            <raw name="targetID" />
            <!-- 4: chargeTypeID or None -->
            <raw name="chargeTypeID" />
            <!-- 5: area, completely unknown contents, empty PyList in packets -->
            <list name="area" />
            <!-- 6: guid: see scripts/parklife/fxSequencer.py -->
            <string name="guid" />
            <!-- 7: isOffensive -->
            <bool name="isOffensive" default="false" />
            <!-- 8: start -->
            <int name="start" />
            <!-- 9: active -->
            <int name="active" />
            <!-- 10: duration in milliseconds (optional) -->
            <int name="duration" default="-1" none_marker="0" />
            <!-- 11: repeat (optional) (really defaults to None, but -1 seems to work too) -->
            <int name="repeat" default="0" none_marker="0" />
            <!-- 12: startTime (optional) -->
            <long name="startTime" default="0" none_marker="0" />
            <!-- 13: graphicInfo or None  - not sure what this is yet.  -->
            <raw name="graphicInfo" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="CmdSetSpeedFraction">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="SetSpeedFraction" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0 -->
            <int name="entityID" />
            <!-- 1 -->
            <real name="fraction" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="CmdFollowBall">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="FollowBall" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0 -->
            <int name="entityID" />
            <int name="targetID" />
            <int name="range" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="CmdStop">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="Stop" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0 -->
            <int name="entityID" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="CmdWarpTo">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="WarpTo" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0 -->
            <int name="entityID" />
            <!-- 1 -->
            <real name="dest_x" />
            <!-- 2 -->
            <real name="dest_y" />
            <!-- 3 -->
            <real name="dest_z" />
            <!-- 4: distance from target to stop -->
            <int name="distance" />
            <!-- 5: warp speed in AU/s times 10 -->
            <int name="warpSpeed" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="CmdGotoDirection">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="GotoDirection" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
            <real name="x" />
            <real name="y" />
            <real name="z" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="CmdAlignTo">
    <tupleInline>
      <!-- 0 -->
      <stringInline value="AlignTo" />
      <!-- 1 -->
      <tupleInline>
        <int name="entityID" />
      </tupleInline>
    </tupleInline>
  </elementDef>

  <elementDef name="CmdGotoPoint">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="GotoPoint" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
            <real name="x" />
            <real name="y" />
            <real name="z" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="CmdOrbit">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="Orbit" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
            <int name="orbitEntityID" />
            <int name="distance" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallSpeed">
    <tupleInline>
      <stringInline value="SetMaxSpeed" />
      <tupleInline>
        <int name="entityID" />
        <real name="speed" />
      </tupleInline>
    </tupleInline>
  </elementDef>

  <elementDef name="SetBallPosition">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="SetBallPosition" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
            <real name="x" />
            <real name="y" />
            <real name="z" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallAgility">
      <tupleInline>
        <stringInline value="SetBallAgility" />
        <tupleInline>
            <int name="entityID" />
            <real name="agility" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallVelocity">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="SetBallVelocity" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
            <real name="x" />
            <real name="y" />
            <real name="z" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallMass">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="SetBallMass" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
            <real name="mass" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallRadius">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="SetBallRadius" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
            <real name="radius" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallMassive">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="SetBallMassive" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
        <!-- integer boolean -->
            <int name="is_massive" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallFree">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="SetBallFree" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
        <!-- integer boolean I think -->
            <int name="is_free" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallInteractive">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="SetBallInteractive" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0: entityID -->
            <int name="entityID" />
            <!-- 1: interactive: on/off -->
            <int name="interactive" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallHarmonic">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="SetBallHarmonic" />
        <!-- 1 -->
        <tupleInline>
            <int name="itemID" />
            <int name="allianceID" />
            <int name="corpID" />
            <int name="mass" /><!-- always -1 -->
            <int name="harmonic" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="SetBallCloak">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="CloakBall" />
        <!-- 1 -->
        <tupleInline>
            <int name="entityID" />
            <bool name="cloaked" />
            <!-- optional: maybe <real name="cloakMode" /> -->
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="AddMushroom">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="AddMushroom" />
        <!-- 1 -->
        <tupleInline>
            <int name="parentID" />
        <!-- might be range -->
            <real name="unknown2" />
            <real name="unknown3" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="OnDockingAccepted">
        <!-- OnDockingAccepted(self, dockingStartPos, dockingEndPos, stationID): -->
      <tupleInline>
        <!-- 0: ship position -->
      <listInline>
        <real name="ship_x" />
        <real name="ship_y" />
        <real name="ship_z" />
      </listInline>
        <!-- 1: station dockpoint-->
      <listInline>
        <real name="station_x" />
        <real name="station_y" />
        <real name="station_z" />
      </listInline>
        <!-- 2: stationID -->
      <int name="stationID" />
      </tupleInline>
  </elementDef>

  <elementDef name="TerminalExplosion">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="TerminalExplosion" />
        <!-- 1 -->
        <tupleInline>
            <int name="shipID" />
            <int name="bubbleID" />
            <bool name="ballIsGlobal" />
        </tupleInline>
      </tupleInline>
  </elementDef>

  <elementDef name="OnDroneStateChange">
      <tupleInline>
        <!-- 0 -->
        <stringInline value="OnDroneStateChange" />
        <!-- 1 -->
        <tupleInline>
            <!-- 0: droneID -->
            <int name="droneID" />
            <!-- 1: ownerID -->
            <int name="ownerID" />
            <!-- 2: controllerID (ship ID) -->
            <int name="controllerID" />
            <!-- 3: activityState -->
            <int name="activityState" />
            <!-- 4: droneTypeID -->
            <int name="droneTypeID" />
            <!-- 5: controllerOwnerID (ship's owner ID) -->
            <int name="controllerOwnerID" />
            <!-- 6: targetID -->
            <int name="targetID" />
        </tupleInline>
      </tupleInline>
  </elementDef>

</elements>


